# Build the manager binary
FROM golang:1.21 as builder

WORKDIR /workspace
# Copy the Go Modules manifests
COPY go.mod go.mod
COPY go.sum go.sum
# cache deps before building and copying source so that we don't need to re-download as much
# and so that source changes don't invalidate our downloaded layer
RUN go mod download

# Copy the go source
COPY main.go main.go
COPY apis/ apis/
COPY controllers/ controllers/
COPY pkg/ pkg/

# Install dlv
RUN go install -mod=readonly github.com/go-delve/delve/cmd/dlv@latest
ENV GCFLAGS "all=-N -l"

# Build the Go binary
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -gcflags "all=-N -l" -a -o manager main.go

# Use a separate stage for the final image
FROM registry.access.redhat.com/ubi9/ubi-minimal:latest
RUN microdnf install -y  wget tar yum findutils gzip && microdnf clean all
RUN yum install -y glibc golang \
                     && yum update -y glibc golang

ENV OPERATOR=/usr/local/bin/khulnasoft-operator \
    USER_UID=1001 \
    USER_NAME=khulnasoft-operator

LABEL name="Khulnasoft Operator" \
      vendor="Khulnasoft Security Software Ltd." \
      version="v1.0.2" \
      release="1" \
      summary="Khulnasoft Security Operator." \
      description="The Khulnasoft Security Operator runs within a Openshift (or Kubernetes) cluster, and provides a means to deploy and manage the Khulnasoft Security cluster and components"

WORKDIR /

COPY licenses /licenses
COPY --from=builder /workspace/manager .
COPY --from=builder /go/bin/dlv /usr/bin/

USER ${USER_UID}
ENTRYPOINT ["/manager"]

## Set the entrypoint for the container
ENTRYPOINT ["/usr/bin/dlv", "--listen=:40000", "--headless=true", "--api-version=2", "--accept-multiclient", "exec", "/manager"]
